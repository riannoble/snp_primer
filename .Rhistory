# Data processing
require("DT")
require("dplyr")
require("tidyverse")
require("stringi")
require("stringr")
require("mosaic")
require("purrr")
#graphing
require("ggplot2")
require("hexbin")
require("patchwork")
require("plotly")
# Bioinformatics
require("BiocManager")
require("biomaRt")
require("spgs")
require("primer3")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
mart_api(primer, shift)
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
#snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
mart_api(primer, shift)
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin)
get_multiplex(df, Heterodimer_tm, top)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
#snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
## The one that produce all the primers
all_text_wrangling <- function(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift){
## extrac the candidate from the left side (upstream) of the SNP
## extrac the candidate from the right side (downstream) of the SNP
## We are only getting the primers that are closed to the SNP for now
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence,
~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far,
shift))) %>% unnest(substrings)
grouped_sequences$faraway <- grouped_sequences_far$substrings
grouped_sequences <-  grouped_sequences[, -2]
grouped_sequences$direction <- duplicated(grouped_sequences[[1]])
grouped_sequences <- grouped_sequences %>%
mutate(direction = ifelse(direction == FALSE, "LEFT", "RIGHT"))
return(grouped_sequences)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
return(df)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
mart_api(primer, shift)
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin) # unexplained error?
result <- get_multiplex(df, Heterodimer_tm, top)
tkmessageBox(message = paste("The result is:", result))
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# install.packages("devtools")
# library(devtools)
# install_github("rianoble/acornfinder")
# library(acornfinder)
#################################################
# Imports
# Probe
#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("rprimer")
require("rprimer")
#library(Biostrings)
require(tcltk)
# Data processing
require("DT")
require("dplyr")
require("tidyverse")
require("stringi")
require("stringr")
require("mosaic")
require("purrr")
#graphing
require("ggplot2")
require("hexbin")
require("patchwork")
require("plotly")
# Bioinformatics
require("BiocManager")
require("biomaRt")
require("spgs")
require("primer3")
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
print("R get filter activated")
# Applied filters before multiplexing
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each primer group
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything()) # Moves a block of columns
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# Technical debt
df <- df[!duplicated(df$snpID), ]
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
level5 <- soulofmultiplex(df, Heterodimer_tm)
print(level5)
level5_with_tm_result <- get_tm_for_all_primers(level5) # What is this fxn??
result <- get_multiplex(df, Heterodimer_tm, top)
tkmessageBox(message = paste("The result is:", result))
install.packages("svDialigs")
install.packages("svDialogs")
library(svDialogs)
winDialog(type = "message", message = paste("Result:", result))
winDialog(type = "message", message = paste("Result:", result))
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
mart_api(primer, shift)
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin) # unexplained error?
result <- get_multiplex(df, Heterodimer_tm, top)
shinyString <- paste("<textarea id='copyableTextArea' rows='5' cols='50' readonly>", result, "</textarea>")
return(shinyString)
}
result <- get_multiplex(df, Heterodimer_tm, top)
shinyString <- paste("<textarea id='copyableTextArea' rows='5' cols='50' readonly>", result, "</textarea>")
return(shinyString)
shinyString
library(htmltools)
# Example HTML content
html_content <- '
<!DOCTYPE html>
<html>
<head>
<title>HTML Output</title>
</head>
<body>
<h1>',result,'</h1>
# Example HTML content
html_template <- paste0('
<!DOCTYPE html>
<html>
<head>
<title>HTML Output</title>
</head>
<body>
<h1>', result, '</h1>
<p>This is an example of HTML output displayed in RStudio.</p>
</body>
</html>
')
# Display HTML content in RStudio Viewer pane
html_print(html_content)
# Display HTML content in RStudio Viewer pane
html_print(html_template)
# Example HTML content
html_template <- paste0('
<!DOCTYPE html>
<html>
<head>
<title>HTML Output</title>
</head>
<body>
<h1>', result, '</h1>
<p>This is an example of HTML output displayed in RStudio.</p>
</body>
</html>
', collapse = "")
# Display HTML content in RStudio Viewer pane
html_print(html_template)
# Display HTML content in RStudio Viewer pane
html_print(result)
# Display HTML content in RStudio Viewer pane
html_print(result)
# Example HTML content
html_template <- paste0(result, collapse = "")
# Display HTML content in RStudio Viewer pane
html_print(html_template)
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
mart_api(primer, shift)
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin) # unexplained error?
result <- get_multiplex(df, Heterodimer_tm, top)
# Example HTML content
html_template <- paste0(result, collapse = "")
# Display HTML content in RStudio Viewer pane
html_print(html_template)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
?appendConsole
??appendConsole
require("biomaRt")
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
print("R get filter activated")
# Applied filters before multiplexing
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each primer group
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything()) # Moves a block of columns
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# Technical debt
df <- df[!duplicated(df$snpID), ]
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
level5 <- soulofmultiplex(df, Heterodimer_tm)
level5_with_tm_result <- get_tm_for_all_primers(level5) # What is this fxn??
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
df <- mart_api(primer, shift)
df <- get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin) # unexplained error?
result <- get_multiplex(df, Heterodimer_tm, top)
# Example HTML content
html_template <- paste0(result, collapse = "")
# Display HTML content in RStudio Viewer pane
html_print(html_template)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
df <- mart_api(primer, shift)
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
df <- mart_api(primer, shift)
# FUNCTION - Primer Generator
mart_api <- function(primer,
shift){
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
print("snp_list generated")
upStream <- center
print("upstream")
downStream <- center
print("downstream")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
return(df)
}
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
df <- mart_api(primer, shift)
df <- get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin) # unexplained error?
result <- get_multiplex(df, Heterodimer_tm, top)
# Example HTML content
html_template <- paste0(result, collapse = "")
# Display HTML content in RStudio Viewer pane
html_print(html_template)
}
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
