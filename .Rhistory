print(length(arranged_list))
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
level5 <- get_display_tree(level3, 3)
repeated_list <- rep(df[[1]], each = 2)
suffix <- c("_forward", "_reverse")
modified_list <- paste0(repeated_list, suffix[rep(1:length(suffix), length.out = length(repeated_list))])
rownames(level5) <- modified_list
level5 <- rbind(level5, Tm = c(round(mean(sapply(level5[[1]], calculate_tm)), 2),
round(mean(sapply(level5[[2]], calculate_tm)), 2),
round(mean(sapply(level5[[3]], calculate_tm)),2)))
return(level5)
}
mart_api <- function(primer,
shift, appendConsole){
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
appendConsole("Primer generated")
print("Primer generated")
return(df)
}
get_filter <- function(df, # primer
desired_tm,
diff, # max diff in tm
Heterodimer_tm, # should this be heterodimer_tm?
Homodimer,
hairpin) {
print("R get filter activated")
# Applied filters before multiplexing
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each primer group
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything()) # Moves a block of columns
# Display the updated nested tibble
return(df)
}
get_multiplex <- function(df,
Heterodimer_tm,
top){
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# Techincal debt
df <- df[!duplicated(df$snpID), ]
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
level5 <- soulofmultiplex(df, Heterodimer_tm)
print(level5)
level5_with_tm_result <- get_tm_for_all_primers(level5)
return(level5_with_tm_result)
}
# This one produces the true table we used - MAIN OUTPUT OF IDEAL FXN
ProduceMasterTable <- function(desires_tm, diff, Heterodimer_tm, Homodimer, hairpin){
reactive(get_filter(unfiltered(),
desired_tm,
diff,
Heterodimer_tm,
Homodimer,
hairpin
))}
# This produced the raw table that has not been filtered
#unfiltered
ProduceRawTable <- function(run_button, primer_list, shift){
eventReactive(input$run_button, {
mart_api(primer_list, shift, appendConsole)
})}
# This produce summary of primer generations
ProduceGenerationSummary <- function(){
renderDataTable(
masterTable()[c(1,2,3)]
)}
# This produces the result of multiplexing
ProduceMultiplexResult <- function(Heterodimer_tm, top){
renderDataTable({
req(masterTable())  # Ensure that masterTable is not NULL
get_multiplex(masterTable(),
input$Heterodimer_tm,
input$top)
})}
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages(c("cli", "digest", "dplyr", "DT", "fansi", "glue", "htmltools", "httpuv", "later", "Rcpp", "RCurl", "rlang", "vctrs"))
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
.libPaths("htmltools")
.libPaths()
.libPaths(htmltools)
find.package(htmltools)
find.package("htmltools")
install.packages("htmltools")
install.packages("rprimer")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rprimer")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rprimer")
install.packages("rprimer")
install.packages("DT")
install.packages("DT")
install.packages("dplyr")
require(rprimer)
install_github("rianoble/acornfinder")
install.packages("devtools")
install_github("rianoble/acornfinder")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
acornfinder::hello()
install_github("rianoble/acornfinder")
install_github("rianoble/acornfinder")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
install_github("rianoble/acornfinder")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer = 45
top = 2
mart_api <- function(primer,
shift, appendConsole){
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
appendConsole("Primer generated")
print("Primer generated")
return(df)
}
mart_api(primer, shift, appendConsole)
# Data processing
require(DT)
require(dplyr)
usethis::create_from_github(
"https://github.com/rianoble/acornfinder/tree/main",
destdir = ""C:/Users/riano/Documents/acornfinder/acornfinder.Rproj""
usethis::create_from_github(
"https://github.com/rianoble/acornfinder/tree/main",
destdir = "C:/Users/riano/Documents/acornfinder/acornfinder.Rproj"
)
usethis::create_from_github(
"https://github.com/rianoble/acornfinder/tree/main",
destdir = "C:/Users/riano/Documents/acornfinder"
)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
import tkinter as tk
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
message("Running mart_api...")
mart_api(primer, shift)
message("Running get_filter...")
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin)
message("Running get_multiplex...")
get_multiplex(df, Heterodimer_tm, top)
}
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
install.packages("devtools")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
require("biomaRt")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp", mirror = "useast")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
git pull
install_github("rianoble/acornfinder")
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
#  install.packages("BiocManager")
#BiocManager::install("rprimer")
require("rprimer")
#library(Biostrings)
# Data processing
require("DT")
require("dplyr")
require("tidyverse")
require("stringi")
require("stringr")
require("mosaic")
require("purrr")
#graphing
require("ggplot2")
require("hexbin")
require("patchwork")
require("plotly")
# Bioinformatics
require("BiocManager")
require("biomaRt")
require("spgs")
require("primer3")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snpmart
View(snpmart)
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
require("rprimer")
#library(Biostrings)
# Data processing
require("DT")
require("dplyr")
require("tidyverse")
require("stringi")
require("stringr")
require("mosaic")
require("purrr")
#graphing
require("ggplot2")
require("hexbin")
require("patchwork")
require("plotly")
# Bioinformatics
require("BiocManager")
require("biomaRt")
require("spgs")
require("primer3")
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
mart_api(primer, shift)
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
#snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
library(acornfinder)
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
findacorn <- function(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin){
mart_api(primer, shift)
get_filter(df, desired_tm, diff, Heterodimer_tm, Homodimer, hairpin)
get_multiplex(df, Heterodimer_tm, top)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
#snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
## The one that produce all the primers
all_text_wrangling <- function(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift){
## extrac the candidate from the left side (upstream) of the SNP
## extrac the candidate from the right side (downstream) of the SNP
## We are only getting the primers that are closed to the SNP for now
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence,
~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far,
shift))) %>% unnest(substrings)
grouped_sequences$faraway <- grouped_sequences_far$substrings
grouped_sequences <-  grouped_sequences[, -2]
grouped_sequences$direction <- duplicated(grouped_sequences[[1]])
grouped_sequences <- grouped_sequences %>%
mutate(direction = ifelse(direction == FALSE, "LEFT", "RIGHT"))
return(grouped_sequences)
}
findacorn(primer, shift, desired_tm, diff, Heterodimer_tm, Homodimer, top, hairpin)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
return(df)
install.packages("devtools")
library(devtools)
install_github("rianoble/acornfinder")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
