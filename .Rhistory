# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (i in seq(far, far + shift)){
# to Right
for (distance in start_distance:end_distance) {
# print(substr(string, far + center, far + center + distance))
sub = substr(string, i + center, i + center + distance)
substrings_right <- c(substrings_right, toupper(reverseComplement(sub)))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center - distance - far, center - far))
substrings_left <- c(substrings_left,
substr(string,
center - distance - i,
center - i))}
}
# Return the extracted substrings
return(list(right = substrings_right, left = substrings_left))
}
## The one that produce all the primers
all_text_wrangling <- function(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift){
## extract the candidate from the left side (upstream) of the SNP
## extract the candidate from the right side (downstream) of the SNP
## We are only getting the primers that are closed to the SNP for now
grouped_sequences <- snp_wrangled %>%
group_by(snpID, snp_character) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID, snp_character) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence,
~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far,
shift))) %>% unnest(substrings)
grouped_sequences$faraway <- grouped_sequences_far$substrings
grouped_sequences <- grouped_sequences[, -3]
# what is this code below for?
grouped_sequences$direction <- duplicated(paste(grouped_sequences$snpID, grouped_sequences$snp_character))
grouped_sequences <- grouped_sequences %>%
mutate(direction = ifelse(direction == FALSE, "LEFT", "RIGHT"))
return(grouped_sequences)
}
all_text_wrangling_reverse <- function(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift){
## extract the candidate from the left side (upstream) of the SNP
## We are only getting the primers that are close to the SNP for now
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1) %>%
ungroup() %>%
mutate(substrings = map(sequence,
~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far,
shift))) %>% unnest(substrings)
grouped_sequences$faraway <- grouped_sequences_far$substrings
grouped_sequences <-  grouped_sequences[, -2]
grouped_sequences$direction <- duplicated(grouped_sequences[[1]])
grouped_sequences <- grouped_sequences %>%
mutate(direction = ifelse(direction == FALSE, "LEFT", "RIGHT"))
return(grouped_sequences)
}
# Apply all the filters before multiplexing
stage1_filter <- function(df,
desired_tm,
diff,
Homodimer,
hairpin){
df
# This is the soft filter. We first make sure there is left after after the filtering. If not, we keep the best option
for (i in 1:length(df[[3]])){
# Homodimer
k = df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_homodimer)[2,]) < Homodimer]
if (length(k) > 5) {
df[[3]][[i]] <- df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_homodimer)[3,]) < Homodimer]
}else{
print(paste("Homodimer - Bottle neck", df[[1]][[i]]))
calculated_values <- sapply(df[[3]][[i]], calculate_homodimer)
differences <- abs(unlist(calculated_values[2,]) - Homodimer)
min_diff_indices <- order(differences)[1:min(5, length(differences))]
df[[3]][[i]] <- df[[3]][[i]][min_diff_indices]
}
# Hairpin
k = df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_hairpin)[2,]) < hairpin]
if (length(k) > 5) {
df[[3]][[i]] <- df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_hairpin)[2,]) < hairpin]
}else{
print(paste("Hairpin - Bottle neck", df[[1]][[i]]))
calculated_values <- sapply(df[[3]][[i]], calculate_hairpin)
differences <- abs(unlist(calculated_values[2,]) - hairpin)
min_diff_indices <- order(differences)[1:min(5, length(differences))]
df[[3]][[i]] <- df[[3]][[i]][min_diff_indices]
}
# Filter Tm above target
k = df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_tm)) < desired_tm + diff]
if (length(k) > 5) {
df[[3]][[i]] <- k
}else{
print(paste("Tm_above - Bottle neck", df[[1]][[i]]))
calculated_values <- sapply(df[[3]][[i]], calculate_tm)
differences <- abs(unlist(calculated_values) - (desired_tm + diff) )
min_diff_indices <- order(differences)[1:min(5, length(differences))]
df[[3]][[i]] <- df[[3]][[i]][min_diff_indices]
}
# df[[2]][[i]] <- df[[2]][[i]][unlist(sapply(df[[2]][[i]], calculate_tm)) > desired_tm - diff]
# Filter Tm below target
k = df[[3]][[i]][unlist(sapply(df[[3]][[i]], calculate_tm)) > desired_tm - diff]
if (length(k) > 5) {
df[[3]][[i]] <- k
} else {
print(paste("TM below - Bottle neck", df[[1]][[i]]))
calculated_values <- sapply(df[[3]][[i]], calculate_tm)
differences <- abs(unlist(calculated_values) - (desired_tm - diff) )
min_diff_indices <- order(differences)[1:min(5, length(differences))]
df[[3]][[i]] <- df[[3]][[i]][min_diff_indices]
}
}
df
for (i in 1:length(df[[4]])){
if (length(df[[4]][[i]]) != 0){
df[[4]][[i]] <- df[[4]][[i]][unlist(sapply(df[[4]][[i]], calculate_tm)) > desired_tm - diff]
}
if (length(df[[4]][[i]]) != 0){
df[[4]][[i]] <- df[[4]][[i]][unlist(sapply(df[[4]][[i]], calculate_hairpin)[2,]) < hairpin]
}
}
df
for (i in 1:length(df[[4]])){
if (length(df[[4]][[i]]) != 0){
df[[4]][[i]] <- df[[4]][[i]][unlist(sapply(df[[4]][[i]], calculate_homodimer)[2,]) < Homodimer]
df[[4]][[i]] <- df[[4]][[i]][unlist(sapply(df[[4]][[i]], calculate_tm)) < desired_tm + diff]
} else {}
}
df
for (i in length(df[[1]]):1){
if (length(df[[4]][[i]]) == 0){
df <- df[-i, ]
}
}
df
return(df)
}
### select the top n primers for multiplexing
extract_top_n <- function(nested_list, n) {
modified_list <- lapply(nested_list, function(inner_list) {
if (length(inner_list) >= n) {
inner_list[1:n]
} else {
inner_list
}
})
return(modified_list)
}
# This handles what part of the tree we want to show
get_display_tree <- function(level3, keep){
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
display_tree <- list()
for (i in 1:keep){
#if (!is.na(endpoints[[i]])) {
display_tree <- c(display_tree, list(unlist(endpoints[[i]])))
#}
}
display_tree <- data.frame(display_tree)
first_row <- display_tree[1, ]
display_tree <- display_tree[-1, ]
display_tree <- rbind(display_tree, first_row)
colnames(display_tree) <- paste0("Option ", seq(1, keep))
return(display_tree)
}
soulofmultiplex <- function(df, Heterodimer_tm){
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[5]][[i]])),
list(unlist(df[[6]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
if (length(arranged_list) != 2) {
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
# arranged_list
# Running
print(length(arranged_list))
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evaluate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm) # go back to compute_bad_nodes
print(paste("We are removing: ", length(bad_nodes))) # why aren't we removing anything?
# to debug, add print statements throughout the for loop for more accurate location of bug
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3, bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
}
level5 <- get_display_tree(level3, 3)
repeated_list <- rep(df[[1]], each = 2)
suffix <- c("_forward", "_reverse")
modified_list <- paste0(repeated_list, suffix[rep(1:length(suffix), length.out = length(repeated_list))])
rownames(level5) <- modified_list
level5 <- rbind(level5, Tm = c(round(mean(sapply(level5[[1]], calculate_tm)), 2),
round(mean(sapply(level5[[2]], calculate_tm)), 2),
round(mean(sapply(level5[[3]], calculate_tm)),2)))
return(level5)
}
get_tm_for_all_primers <- function(level5) {
level5_with_tm_result <- data.frame(matrix(NA, nrow = nrow(level5), ncol = 0))
# Apply the 'calculate_tm' function to each column of the dataframe
for (i in seq_along(level5)) {
# Calculate TM for the column and round the result
tm_results <- round(calculate_tm(level5[[i]]), 2)
# Combine the original column with the TM results
combined <- data.frame(level5[[i]], tm_results)
# Set the column names for the combined columns
original_col_name <- names(level5)[i]
names(combined) <- c(original_col_name, paste0(original_col_name, "_tm"))
# Bind the new combined columns to the result dataframe
level5_with_tm_result <- cbind(level5_with_tm_result, combined)
}
# Remove the first column if it contains only NA values from the placeholder creation
level5_with_tm_result <- level5_with_tm_result[, colSums(is.na(level5_with_tm_result)) < nrow(level5_with_tm_result)]
rownames(level5_with_tm_result) <- rownames(level5)
level5_with_tm_result <- as.matrix(level5_with_tm_result)
}
# END OF BACKING FUNCTIONS//////////////
#	Check for hairpin loops, self dimers in forward primers
#	Do same for reverse primers (different order?)
#	Check melting temperatures in reverse primers to be in range of forward primer melting temps
#	Check for interactions (hairpin loops/primer-dimers)
#	Best three by closest melting temps lowest number of interactions (DON’T NARROW DOWN TO THREE)
#	Complete the whole process for the opposite strand (don’t need marking mechanism)
#	Do this for all possible snps
#	To narrow down to final three, look at closest melting temps between all, primer-dimer interactions between all, look for max reduction
#	Focus on probes later
# QUESTIONS
# -direction column in df?
# SINGULAR SNP ID
get_primer_candidates <- function(primer,
shift){
# Explore options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# Search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 28
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
print("snp_list generated")
upStream <- center
print("upstream")
downStream <- center
print("downstream")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp") # possibly establish earlier?
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# New dataframe contains all snp variation sequences plus a snp id column
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
# New dataframe contains all snp variation sequences plus a snp id column
snp_wrangled <- mutate(snp_wrangled, snp_character = substr(snp_wrangled$sequence, 801, 801)) # 804 is the universal snp position for all snps bc of seq setup
# I have a long long string. I want to get the left 18~25 characters and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_wrangling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primers generated")
return(df)
}
get_self_filter <- function(df) {
print("Reformatting data table")
# Pivot longer to combine 'substrings' and 'faraway' into 'source' and 'primers'
self_df <- df %>%
pivot_longer(
cols = c("substrings", "faraway"),
names_to = "source",
values_to = "primers"
)
# Unnesting to handle list-columns if necessary (depending on your data structure)
self_df <- self_df %>%
unnest(cols = primers)
# Collapse list elements in 'primers' column to a single string if necessary
self_df$primers <- sapply(self_df$primers, function(x) {
if (is.list(x)) paste(x, collapse = ", ") else x
})
print("Calculating hairpins, self dimers, and temps")
# Calculate and mutate the hairpin, selfdimer, and temp columns
self_df <- self_df %>%
mutate(
hairpin = calculate_hairpin(primers)$dg * 0.004184,
selfdimer = calculate_homodimer(primers)$dg * 0.004184,
temp = calculate_tm(primers),
# Replace NA values with Inf to handle them as large values in sorting
hairpin = ifelse(is.na(hairpin), Inf, hairpin),
selfdimer = ifelse(is.na(selfdimer), Inf, selfdimer)
)
print("Filtering temps")
# Filter based on temperature range
self_df <- self_df %>%
filter(temp > 45 & temp < 70)
print("Taking top ten per group")
# Group by the specified columns, arrange, and select the top 10 rows
self_df <- self_df %>%
group_by(snpID, snp_character, direction, source) %>%
arrange(desc(selfdimer), desc(hairpin)) %>%
#filter(hairpin > -7,
#       selfdimer > -7) %>%
slice_head(n = 10) %>%
ungroup() %>%
mutate(source = recode(source,
"substrings" = "forward",
"faraway" = "reverse")) %>%
arrange(snpID, snp_character, direction, source)
df <- self_df
df
return(df)
}
# Example of how to call this function (assuming df is your data frame)
# result_df <- get_self_filter(df)
get_cross_filter <- function(df){
print("Generating matches")
forward_df <- filter(df, source == "forward")
reverse_df <- filter(df, source == "reverse")
## THIS IS WHERE DATA RUNS INTO A BOTTLENECK!
combined_df <- forward_df %>%
inner_join(reverse_df, by = c("snpID", "snp_character", "direction"), relationship = "many-to-many") %>%
arrange(snpID, snp_character, direction) %>%
select(-source.x, -source.y) %>%
rename(forward_primer = primers.x,
forward_hairpin = hairpin.x,
forward_selfdimer = selfdimer.x,
forward_temp = temp.x,
reverse_primer = primers.y,
reverse_hairpin = hairpin.y,
reverse_selfdimer = selfdimer.y,
reverse_temp = temp.y)
print("Filtering matches")
filtered_combined <- combined_df %>%
filter(abs(forward_temp - reverse_temp) <= 1) %>%
mutate(heterodimer = calculate_dimer(forward_primer, reverse_primer)$dg * 0.004184)
#filter(heterodimer > -7)
df <- filtered_combined
# if you want to take top 50
df <- df %>%
group_by(snpID, snp_character) %>%
arrange(desc(heterodimer)) %>%
slice_head(n = 10)
df
return(df)
}
get_complex_filter <- function(df){
unique_groups <- df %>% distinct(snpID, snp_character)
#match <- vector("logical", nrow(df))
print("Filtering for temps between all pairs")
# add column for tracking matches
df$match <- ""
# Iterate over each unique group
for (first_index in 1:nrow(df)) {
print(paste0(first_index, " out of ", nrow(df), " rows"))
for (second_index in 1:nrow(df)) {
if (df$snpID[first_index] == df$snpID[second_index] & df$snp_character[first_index] == df$snp_character[second_index]) {
next
}
else {
values <- c(df$forward_temp[first_index], df$reverse_temp[first_index],
df$forward_temp[second_index], df$reverse_temp[second_index])
differences <- abs(diff(values))
if (max(differences < 1)) {
df$match[second_index] <- TRUE
}
}
}
}
df <- filter(df, match == TRUE)
df$match <- ""
for (first_index in 1:nrow(df)) {
print(paste0(first_index, " out of ", nrow(df), " rows"))
for (second_index in 1:nrow(df)) {
if (df$snpID[first_index] == df$snpID[second_index] & df$snp_character[first_index] == df$snp_character[second_index]) {
next
}
else {
hets <- c((calculate_dimer(df$forward_primer[first_index], df$forward_primer[second_index])$dg * 0.004184), (calculate_dimer(df$forward_primer[first_index], df$reverse_primer[second_index])$dg * 0.004184), (calculate_dimer(df$reverse_primer[first_index], df$forward_primer[second_index])$dg * 0.004184), (calculate_dimer(df$reverse_primer[first_index], df$reverse_primer[second_index])$dg * 0.004184))
if (min(hets > -10)) {
df$match[second_index] <- TRUE
}
}
}
}
df <- filter(df, match == TRUE)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
df
return(df)
#Store the results in the list
#comparison_results[[paste(current_group$snpID, current_group$snp_character, sep = "_")]] <- mean_diff
}
primer = "rs1550576, rs17025867"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
df <- get_primer_candidates(primer, shift)
df <- get_self_filter(df)
df <- get_cross_filter(df)
df <- get_complex_filter(df)
View(df)
split_dfs <- split(df, df$groupID)
split_dfs
View(split_dfs)
# Print each DataFrame
for(snp in names(split_dfs)) {
cat("SNP ID:", snp, "\n")
print(split_dfs[[snp]])
}
shiny::runApp('R')
runApp('R')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp('R')
