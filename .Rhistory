lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
final_df <- rbind(final_df, current_combinations)
}
while (nrow(final_df) < 10) {
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
final_df <- rbind(final_df, current_combinations)
}
View(final_df)
final_df <- final_df %>%
arrange(lowest_hets) %>%
slice(1:10)
View(final_df)
final_df <- final_df %>%
arrange(desc(lowest_hets)) %>%
slice(1:10)
View(final_df)
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
primer = "rs1550576, rs17025867"
df <- get_primer_candidates(primer, shift)
df <- get_self_filter(df)
df <- get_cross_filter(df)
df <- get_complex_filter(df)
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
final_df <- data.frame()
while (nrow(final_df) < 10) {
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
final_df <- rbind(final_df, current_combinations)
}
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
View(current_combinations)
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
final_df <- data.frame()
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
View(current_combinations)
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 2, na.rm = TRUE)))
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
final_df <- data.frame()
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
View(current_combinations)
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
df$groupID
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
split_dfs
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(100, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
View(current_combinations)
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 3, na.rm = TRUE)))
View(current_combinations)
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
final_df <- data.frame()
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(1000, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
View(current_combinations)
primer = "rs9462492, rs58318008"
shift = 100
desired_tm = 64
diff = 3
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
hairpin <- 45
df <- get_primer_candidates(primer, shift)
df <- get_self_filter(df)
df <- get_cross_filter(df)
#df <- get_complex_filter(df)
df$groupID <- paste(df$snpID, df$snp_character, sep="-")
split_dfs <- split(df, df$groupID)
split_dfs <- lapply(split_dfs, function(x) {
x[ , !(names(x) %in% c("snpID", "snp_character", "direction", "match"))]
})
final_df <- data.frame()
# Function to generate combinations and sample 100 rows
generate_combinations <- function(list_of_dfs) {
num_dfs <- length(list_of_dfs)
# Generate all possible combinations of row indices
comb_indices <- expand.grid(lapply(list_of_dfs, function(x) 1:nrow(x)))
# Randomly sample 100 rows from the combinations
sampled_indices <- comb_indices %>%
slice_sample(n = min(1000, nrow(comb_indices)))
# Combine the rows from each dataframe for the sampled combinations
all_combinations <- do.call(rbind, lapply(1:nrow(sampled_indices), function(i) {
indices <- as.numeric(sampled_indices[i, ])
combined_row <- do.call(cbind, lapply(1:num_dfs, function(j) {
list_of_dfs[[j]][indices[j], , drop = FALSE]
}))
return(combined_row)
}))
return(all_combinations)
}
# Step 2: Generate combinations step-by-step, sampling 100 rows between each step
current_combinations <- split_dfs[[1]]
for (i in 2:length(split_dfs)) {
current_combinations <- generate_combinations(list(current_combinations, split_dfs[[i]]))
}
names(current_combinations) <- make.names(names(current_combinations), unique = TRUE)
temp_columns <- grep("temp", names(current_combinations), value = TRUE)
primer_columns <- grep("primer", names(current_combinations), value = TRUE)
# Function to calculate differences between all melting temps in a row
calc_temp_diffs <- function(row) {
temps <- unlist(row[temp_columns])
combn(temps, 2, function(x) abs(diff(x)))
}
calc_hets <- function(row) {
primer_seqs <- unlist(row[primer_columns])
combn(primer_seqs, 2, function(x) calculate_dimer(x[1], x[2])$dg * 0.004184)
}
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE)))
View(current_combinations)
# Add new column with the differences
current_combinations <- current_combinations %>%
rowwise() %>%
mutate(temp_diffs = list(calc_temp_diffs(dplyr::cur_data())),
hets = list(calc_hets(dplyr::cur_data())),
hets = list(map(hets, ~replace(.x, is.na(.x), Inf))),
highest_hets = max(unlist(hets), na.rm = TRUE),
lowest_hets = min(unlist(hets), na.rm = TRUE)) %>%
ungroup() %>%
filter(!sapply(temp_diffs, function(x) any(x > 1, na.rm = TRUE))) %>%
arrange(desc(lowest_hets))
View(current_combinations)
shiny::runApp('snp_multiplex')
# Source your functions script
source(".../ria_fxns_draft.R")
# Source your functions script
source("/.../ria_fxns_draft.R")
# Source your functions script
source("C:/Users/riano/Documents/acornfinder/acornfinder/R/ria_fxns_draft.R")
runApp('snp_multiplex')
runApp('snp_multiplex')
runApp('snp_multiplex')
View(current_combinations)
write.xlsx(current_combinations, "presentation_data.xlsx")
library(readxl)
write.xlsx(current_combinations, "presentation_data.xlsx")
write_excel_csv(current_combinations, "presentation_data.xlsx")
write.csv(current_combinations,"presentation_data.csv")
current_combinations <- current_combinations[ -c(hets) ]
write_xlsx(current_combinations, "presentation_dat.xlsx")
library(writexl)
write_xlsx(current_combinations, "presentation_dat.xlsx")
install.packages("installr")
library(installr)
installr()
installr()
